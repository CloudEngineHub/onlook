name: Build

on:
    push:
        branches:
            - 'main'
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'
            - 'v[0-9]+.[0-9]+.[0-9]+-**'
        paths-ignore:
            - '**.md'
            - '**.spec.js'
            - '.idea'
            - '.vscode'
            - '.dockerignore'
            - 'Dockerfile'
            - '.gitignore'
            - '.github/**'
            - '!.github/workflows/build.yml'

jobs:
    validate:
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.check-version.outputs.version }}
        steps:
            - uses: actions/checkout@v4
            
            - name: Validate package.json and version
              id: check-version
              run: |
                  if [ ! -f "apps/studio/package.json" ]; then
                      echo "Error: package.json not found"
                      exit 1
                  fi
                  
                  VERSION=$(node -p "require('./apps/studio/package.json').version")
                  if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
                      echo "Error: Invalid version format in package.json"
                      exit 1
                  fi
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

    build:
        needs: validate
        runs-on: ${{ matrix.os }}
        permissions:
            contents: write
        strategy:
            matrix:
                os: [macos-latest, windows-latest]
            fail-fast: false

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'

            - uses: oven-sh/setup-bun@v1
              with:
                  bun-version: latest

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      **/node_modules
                      ~/.cache/electron-builder
                  key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-deps-

            - name: Install dependencies
              run: bun install --frozen-lockfile

            - name: Create env file
              run: |
                  cat << EOF > apps/studio/.env
                  VITE_SUPABASE_API_URL=${{ secrets.SUPABASE_API_URL }}
                  VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
                  VITE_MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN }}
                  VITE_ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
                  VITE_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
                  VITE_LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}
                  VITE_LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}
                  EOF

            - name: Set version
              run: echo "APP_VERSION=${{ needs.validate.outputs.version }}" >> $GITHUB_ENV

            - name: Build foundation
              run: bun build:foundation
              
            - name: Build Vite App
              working-directory: apps/studio
              run: |
                  if [ ! -d "src" ]; then
                      echo "Error: Source directory not found"
                      exit 1
                  fi
                  bun run build

            # Windows-specific steps
            - name: Package Windows App
              if: startsWith(matrix.os, 'windows')
              working-directory: apps/studio
              run: |
                  if [ ! -d "release" ]; then
                      mkdir release
                  fi
                  npx electron-builder --win --dir
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Sign Windows App
              if: startsWith(matrix.os, 'windows')
              uses: azure/trusted-signing-action@v0.3.16
              with:
                  azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
                  endpoint: ${{ secrets.AZURE_ENDPOINT }}
                  code-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
                  certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
                  file-digest: SHA256
                  files-folder: apps/studio/release/${{ env.APP_VERSION }}/win-unpacked
                  files-folder-filter: exe
                  timestamp-rfc3161: http://timestamp.digicert.com

            # macOS-specific steps
            - name: Setup Mac certificates
              if: startsWith(matrix.os, 'macos')
              run: |
                  KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain
                  KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
                  
                  # Create and configure keychain
                  security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
                  security default-keychain -s "$KEYCHAIN_PATH"
                  security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
                  
                  # Import certificates
                  echo '${{ secrets.MAC_CERTS }}' | base64 --decode > $RUNNER_TEMP/certificate.p12
                  security import $RUNNER_TEMP/certificate.p12 -k "$KEYCHAIN_PATH" -P '${{ secrets.MAC_CERTS_PASSWORD }}' -T /usr/bin/codesign
                  security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
                  
                  # Setup Apple API key
                  KEYS_DIR="$HOME/private_keys"
                  mkdir -p "$KEYS_DIR"
                  echo '${{ secrets.APPLE_API_KEY_CONTENT }}' > "$KEYS_DIR/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8"
                  chmod 600 "$KEYS_DIR/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8"
                  
                  echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV
                  echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV

            - name: Build and Sign Mac App
              if: startsWith(matrix.os, 'macos')
              working-directory: apps/studio
              run: |
                  # Build and sign
                  npx electron-builder --mac --publish onTagOrDraft
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  APPLE_API_KEY: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
                  APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
                  APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
                  CSC_KEYCHAIN: ${{ env.KEYCHAIN_PATH }}
                  CSC_KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}

            # Artifact uploads
            - name: Upload Windows Artifacts
              if: startsWith(matrix.os, 'windows')
              uses: actions/upload-artifact@v4
              with:
                  name: signed-windows-binaries
                  path: apps/studio/release/${{ env.APP_VERSION }}/win-unpacked/*.exe
                  retention-days: 5

            - name: Upload Mac Artifacts
              if: startsWith(matrix.os, 'macos')
              uses: actions/upload-artifact@v4
              with:
                  name: signed-mac-binaries
                  path: |
                      apps/studio/release/${{ env.APP_VERSION }}/*.dmg
                      apps/studio/release/${{ env.APP_VERSION }}/*.zip
                  retention-days: 5

            # Cleanup sensitive files
            - name: Cleanup
              if: always()
              run: |
                  # Remove sensitive files
                  rm -f apps/studio/.env
                  if [ -d "$HOME/private_keys" ]; then
                      rm -rf "$HOME/private_keys"
                  fi
                  if [ -f "$RUNNER_TEMP/certificate.p12" ]; then
                      rm -f "$RUNNER_TEMP/certificate.p12"
                  fi
                  
                  # Reset keychain on macOS
                  if [ "$RUNNER_OS" == "macOS" ]; then
                      security delete-keychain "$KEYCHAIN_PATH" || true
                  fi

    publish:
        needs: [validate, build]
        if: startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest
        steps:
            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  name: Release ${{ needs.validate.outputs.version }}
                  draft: true
                  files: |
                      apps/studio/release/${{ needs.validate.outputs.version }}/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}